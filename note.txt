event distribution (x: date, y: amount, try by day first, if not ideal, by month) plot as histgram

win_prob: (bigger than 0) df and mean both (plot as time series)

README

numpy: cumsum [1, 2, 3] -> [1, 2, 5]
	cumprod [1, 2, 3] -> [1, 2, 6]
	net_value

df.rolling(window=5)    (mean, std ... )


construct event_df, take care of missing date(which is not trading day, but has announcement)

get last tading day(ricequant function)


Functions need to implement

get_price()
get_trading_dates()
get_next_trading_date()


2017/6/22

整个流程的一个例子在这个notebook里，测试文件(test.csv)包含了从17年5月9日到17年6月11日的所有公告，10万条左右。筛选公告标题的函数是filter_title()。

有几个问题：

0.目前的筛选原则是，公告标题中有‘增持’（如果还有‘完成’，就直接算事件），但是没有['误操作', '倡议书', '进展', '核查意见', '补充', '计划' ]这些词。我浏览了一些带‘增持’的标题，总结出这些，不知道合不合理。

1.获取价格数据的时候如果卡在事件df的开始和结束日期，那么两边的事件会少很多价格数据。目前我设了两个参数HEAD_EXPAND_NUM，TAIL_EXPAND_NUM， 指的是获取价格时，头和尾要比事件日期的头尾多几天，暂时是20天。你看合适么

2.不能处理大的公告文件。
我看了rqalpha的部分源码，不能直接在本地调用线上可用的那些函数，本地只能用 ‘rqalpha run -f ./rqalpha/examples/buy_and_hold.py -d ./rqalpha/bundle/ -s 2016-06-01 -e 2016-12-01 --stock-starting-cash 100000 --benchmark 000300.XSHG’ 这种方式回测，要想单独用比如get_price()这个函数，需要自己实现一遍。
我只能想出两种方法：可以这样一个个把函数实现出来，好处是可以不联网使用，因为数据都在本地；但是实现起来会比较慢。或者每次先在本地跑出event_list,压缩上传到ricequant，这个步骤每次都要手动做。

3.要不要把absolute_performance和relative_performance的结果存在类的变量里，这样方便选择画不画图，代码也更清晰。
现在的图还是有待改进，我准备换用 plotly 这个库。


2017/6/23

To do list:

1.add histogram at y-axis in absolute and relative performance, on top of rate of return time line
2.try techical analysis
3.